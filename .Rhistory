ungroup()
inpatient_phrase <- inpatient_stress %>%
filter(collection_date == max(collection_date)) %>%
mutate(inpatient_covid_stress = case_when(
avg < 5 ~ "low",
avg >= 5 & avg < 10 ~ "moderate",
avg >= 10 & avg < 20 ~ "high",
avg >= 20 ~ "extreme"
)) %>%
select(inpatient_covid_stress) %>% pull()
#
# for (name in request_name){
#   rmarkdown::render('/Users/Jensen/Documents/projects/covid19_email_script/staging/r_script.Rmd',
#                     output_file =  paste("report_", name, '_', Sys.Date(), ".html", sep=''),
#                     output_dir = '/Users/Jensen/Documents/projects/covid19_email_script/staging/')
# }
#
# request_name <- unique(requests$Name)
#
# request_fun <- function(name){
#   requests %>%
#     filter(Name == {name},
#            Domestic == "Yes") %>%
#     select(Name, State)
# }
#
# # creates list of location request split by name
# request_list <- map_df(request_name, request_fun) %>%
#   split(.$Name) %>%
#   map(function(x) x$State)
#
#
#---------------- BODY of EMAIL ----------------####
# select states
ca <- state_fun("California")
ny <- state_fun("New York")
il <- state_fun("Illinois")
wa <- state_fun("Washington")
ma <- state_fun("Massachusetts")
tx <- state_fun("Texas")
nc <- state_fun("North Carolina")
mo <- state_fun("Missouri")
va <- state_fun("Virginia")
hw <- state_fun("Hawaii")
# select cities
nyc <- state_fun("New York City County, New York")
la  <- state_fun("Los Angeles County, California")
ck  <- state_fun("Cook County, Illinois")
kg  <- state_fun("King County, Washington")
sf  <- state_fun("Suffolk County, Massachusetts") %>% filter(date > "2020-09-12")
mk  <- state_fun("Mecklenburg County, North Carolina")
sb  <- state_fun("San Bernardino County, California")
hr  <- state_fun("Harris County, Texas")
sl  <- state_fun("St. Louis County, Missouri")
kc  <- state_fun("Wyandotte County, Kansas")
vb  <- state_fun("Virginia Beach city County, Virginia")
# international locations
hk <- state_fun("Hong Kong")
sg <- state_fun("Shanghai")
tc <- state_fun("Ontario")
# compose body of email for select locations
ny_body <- email_body_func(ny)
nyc_body <- email_body_func(nyc)
la_body <- email_body_func(la)
seattle_body <- email_body_func(kg)
boston_body <- email_body_func(sf)
chicago_body <- email_body_func(ck)
mecklenburg_body <- email_body_func(mk)
hk_body <- email_body_func(hk)
shanghai_body <- email_body_func(sg)
sanbernardino_body <- email_body_func(sb)
harris_body <- email_body_func(hr)
texas_body <- email_body_func(tx)
ncarolina_body <- email_body_func(nc)
missouri_body <- email_body_func(mo)
saint_louis_body <- email_body_func(sl)
illinois_body <- email_body_func(il)
kansas_body <- email_body_func(kc)
toronto_body <- email_body_func(tc)
va_body <- email_body_func(va)
vbeach_body <- email_body_func(vb)
# save output as Rdata for faster loading
save.image(file = "loaded.Rdata")
save.image(file = "C:/Users/jense/Desktop/Projects/covid_email_report_production/test_automation/master_shiny/loaded.Rdata")
setwd("C:/Users/jense/Desktop/Projects/covid_email_report_production/test_automation")
# load libraries
library(tidyverse) # data manipulation and visualization
library(dplyr) # data manipulation
library(lubridate) # dates
library(htmlTable) # convert table to html
library(htmltools) # html tools
library(data.table) # reading data
library(knitr) # kniting
library(ggplot2) # visualizations
library(matrixStats) # stats
library(plotly) # visualizations
library(purrr) # functional prog
library(expss) # format labeling
library(zoo) # working w/time series data
library(blastula) #compose and send emails
library(ggpubr) # setting multiple plots on one page
library(blastula) # sending emails
library(formattable) # tables
library(janitor) # additional agg func
library(ggplot2) # plotting
library(RColorBrewer) # color scheme
library(usmap) # geo
library(rsconnect)
library(TTR)
# --------- Load Data and Functions ----------####
# load github data from ny times
covid_us <- fread("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv")
covid_state <- fread("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv")
covid_county <- fread("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv")
# load census data from 2010
census <- fread("nst-est2019-alldata.csv")
population <- fread("2019_census_data.csv", header = TRUE)
# load github data from johns hopkins
jhu_cases <- fread("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
jhu_deaths <- fread("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv")
international <- jhu_cases %>%
pivot_longer(cols = !c(colnames(jhu_cases)[1:4]), names_to = "date", values_to = "cases") %>%
left_join(jhu_deaths %>%
pivot_longer(cols = !c(colnames(jhu_cases)[1:4]), names_to = "date", values_to = "deaths") %>%
select(-c(Lat, Long)),
by = c("Province/State" = "Province/State", "Country/Region" = "Country/Region", "date" = "date"))
country_set <- international %>% filter(!is.na(`Country/Region`) & `Province/State` == "")
# vectors for international areas
province <- unique(jhu_cases$`Province/State`)
country <- unique(jhu_cases$`Country/Region`)
# statepop
data("statepop")
# load inpatient and icu
inpatient <- fread("https://healthdata.gov/node/3281101/download")
icu <- fread("https://healthdata.gov/node/3281106/download")
# vaccine data
vaccine <- fread("https://raw.githubusercontent.com/govex/COVID-19/master/data_tables/vaccine_data/raw_data/vaccine_data_us_state_timeline.csv")
# load testing and hospitalization data from covidtrackingproject
ctp_us <- fread("https://covidtracking.com/data/download/national-history.csv")
# get functions
source("function.R")
# --------- Flag for old data ----------####
# format dates
covid_us$date <- ymd(covid_us$date)
covid_state$date <- ymd(covid_state$date)
covid_county$date <- ymd(covid_county$date)
ctp_us$date <- ymd(ctp_us$date)
international$date <- mdy(international$date)
# dates captured in dataset
days_monitored <- n_distinct(covid_us$date)
first_day <- min(covid_us$date)
most_recent <- max(covid_us$date)
#Flag error and send email notification if data is not updated
if(most_recent + 1 < Sys.Date())
compose_email(
body = md(c(
"Mornin' data has not been updated yet. The email script did not execute past load"
))
) %>%
smtp_send(
from = "hu.jensenhu@gmail.com",
to = "jensennhu@gmail.com",
subject = paste0("NYtimes data not yet loaded: ", add_readable_time()),
credentials = creds_key(id = "gmail")
)
if(most_recent != Sys.Date() - 1) stop("NYtimes Data has not been updated")
# --------- Data Prep ----------####
# get states vector
us_states <- unique(covid_state$state)
covid_county$county <- paste(covid_county$county, "County,", covid_county$state)
us_counties <- unique(covid_county$county)
# prepare census data
census <- census %>% select(NAME, REGION, DIVISION, CENSUS2010POP)
census_regions <- census %>%
rename(us_area = NAME,
pop_area = CENSUS2010POP) %>%
select(-DIVISION) %>%
head(5)
pop_2019 <- population %>% select(V1, "2019") %>% rename(state = V1)
pop_2019$`2019` <- as.numeric(gsub(",", "", pop_2019$`2019`))
# get abbr states vector
state_hosp <- unique(icu$state)
# prepare most recent hospital icu/inpatient data
hospital <- icu %>%
group_by(state) %>%
summarise(collection_date = max(collection_date)) %>%
merge(icu, by = c("state", "collection_date")) %>%
merge(inpatient, by = c("state", "collection_date")) %>%
select(state, collection_date, `Percentage of Staffed Adult ICU Beds Occupied Estimated`, "Staffed Adult ICU Beds Occupied Estimated", `Percentage of Inpatient Beds Occupied by COVID-19 Patients Estimated`, "Inpatient Beds Occupied by COVID-19 Patients Estimated")
# prepare most recent vaccine data
v <- vaccine %>%
select(date, Province_State, stabbr, doses_alloc_total, doses_admin_total) %>%
group_by(Province_State) %>%
filter(date == max(date))
# --------- Metrics Calculation and Data Categorization ----------####
# calculate overall us metrics
daily_new <- state_fun(covid_us %>%
left_join(ctp_us %>%
select(date, hospitalizedIncrease, totalTestResultsIncrease),
by = c("date" = "date")))
daily_new$cases_week_mavg <- as.numeric(format(daily_new$cases_week_mavg, scientific = F))
# overall USA metric intro
usa_body <- email_body_func(daily_new)
# df of all USA states/territories - metrics/timeseries
state_metrics <-
us_states %>%
map_df(state_fun)
# list of all USA states/territories email bodies
state_set_ebody <-
state_metrics %>%
split(.$state) %>%
map(~ email_body_func(.))
# categorize All states/territories by thresholds and trends, join census & hospital data
state_metrics_cat <- state_metrics %>%
filter(date == most_recent) %>%
left_join(census, by = c("state" = "NAME")) %>%
left_join(statepop, by = c("state" = "full")) %>%
left_join(pop_2019, by = c("state" = "state" )) %>%
rename(census_2019 = `2019`) %>%
mutate(cases_per_capita = cases_week_mavg/census_2019 * 100000) %>%
left_join(census_regions, by = c("REGION" = "REGION")) %>%
left_join(hospital, by = c("abbr" = "state")) %>%
mutate(
# labeling trend of 7-day mavg ####
trend = case_when(
cases_week_pct_mavg > 0 ~ "rising",
cases_week_pct_mavg == 0 ~ "staying",
cases_week_pct_mavg < 0 ~ "decreasing"
),
categories = case_when(
cases_week_pct_mavg > 0 & cases_per_capita >= 15 ~ "Cases higher and rising",
cases_week_pct_mavg == 0 & cases_per_capita >= 15 ~ "Cases higher and staying",
cases_week_pct_mavg < 0 & cases_per_capita >= 15 ~ "Cases higher and decreasing",
cases_week_pct_mavg > 0 & cases_per_capita < 15 ~ "Cases lower and rising",
cases_week_pct_mavg == 0 & cases_per_capita < 15 ~ "Cases lower and staying",
cases_week_pct_mavg < 0 & cases_per_capita < 15 ~ "Cases lower and decreasing"
),
# categories for covid risk level
covid_risk_level = case_when(
cases_per_capita >= 25 ~ "Unchecked Community Spread",
cases_per_capita >= 10 & cases_per_capita < 25 ~ "Escalating Community Spread",
cases_per_capita >= 1 & cases_per_capita < 10 ~ "Community Spread",
cases_per_capita < 1 ~ "close to containment"
),
# categories for ph intervention
ph_intvtn = case_when(
cases_per_capita >= 25 ~ "Stay-at-Home Orders Necessary",
cases_per_capita >= 10 & cases_per_capita < 25 ~ "Stay-at-Home Orders And/Or Rigorous Test and Trace Programs Advised",
cases_per_capita >= 1 & cases_per_capita < 10 ~ "Rigorous Test and Trace Advised",
cases_per_capita < 1 ~ "Monitor w/testing & tracing"
),
# categories for icu stress ####
icu_stress = case_when(
`Percentage of Staffed Adult ICU Beds Occupied Estimated` < 10 ~ "low",
`Percentage of Staffed Adult ICU Beds Occupied Estimated` >= 10 & `Percentage of Staffed Adult ICU Beds Occupied Estimated` < 30 ~ "moderate",
`Percentage of Staffed Adult ICU Beds Occupied Estimated` >= 30  & `Percentage of Staffed Adult ICU Beds Occupied Estimated` < 60 ~ "high",
`Percentage of Staffed Adult ICU Beds Occupied Estimated` >= 60 ~ "extreme"
),
# categories for inpatient covid stress ####
inpatient_covid_stress = case_when(
`Percentage of Inpatient Beds Occupied by COVID-19 Patients Estimated` < 5 ~ "low",
`Percentage of Inpatient Beds Occupied by COVID-19 Patients Estimated` >= 5 & `Percentage of Inpatient Beds Occupied by COVID-19 Patients Estimated` < 10 ~ "moderate",
`Percentage of Inpatient Beds Occupied by COVID-19 Patients Estimated` >= 10 & `Percentage of Inpatient Beds Occupied by COVID-19 Patients Estimated` < 20 ~ "high",
`Percentage of Inpatient Beds Occupied by COVID-19 Patients Estimated` >= 20 ~ "extreme"
)
) %>%
select(date, state, abbr, fips.x, cases_week_mavg, cases_week_pct_mavg, categories, census_2019, cases_per_capita, us_area, pop_area, trend, covid_risk_level, ph_intvtn, collection_date, `Percentage of Staffed Adult ICU Beds Occupied Estimated`, icu_stress, `Percentage of Inpatient Beds Occupied by COVID-19 Patients Estimated`, inpatient_covid_stress)
# get regions of USA
west <- state_metrics_cat %>% filter(us_area == "West Region") %>% select(state) %>% pull()
south <- state_metrics_cat %>% filter(us_area == "South Region") %>% select(state) %>% pull()
northeast <- state_metrics_cat %>% filter(us_area == "Northeast Region") %>% select(state) %>% pull()
midwest <- state_metrics_cat %>% filter(us_area == "Midwest Region") %>% select(state) %>% pull()
#---------------- 14 day look-back ----------------####
#
# look_back_fun <- function(area){
#   len <- length(state_fun({area})$sign)
#   fourteen <- state_fun({area})$sign[(len):(len-13)]
#   pos <- length(which(fourteen == 1))
#   neg <- length(which(fourteen == -1))
#   neut <- length(which(fourteen == 0))
#
#   if (pos > neg){
#     print(paste0({area}, "'s 14-day look-back indicates majority increasing trends"))
#   } else if (pos < neg){
#     print(paste0({area}, "'s 14-day look-back indicates majority decreasing trends"))
#   } else {
#     print(paste0({area}, "'s 14-day look-back indicates a neutral status"))
#   }
#
# }
#
# len <- length(state_fun("California")$sign)
# fourteen <- state_fun("California")$sign[(len-13):(len)]
# magnitude <- state_fun("California")$cases_week_pct_mavg[(len-13):(len)]
# names(magnitude) <- rep(paste0("Day ", 1: length(magnitude)))
#
# pos <- length(which(fourteen == 1))
# neg <- length(which(fourteen == -1))
# neut <- length(which(fourteen == 0))
#
# if (pos > neg){
#   print(paste0("Increase"))
# } else if (pos < neg){
#   print(paste0("Decrease"))
# } else {
#   print(paste0("Neutral"))
# }
states_incr_df <- state_metrics_cat %>%
filter(trend == "rising") %>%
pull(state) %>%
# get covid metrics
map(state_fun) %>%
# determine # days consecutive increase
map_dfr(consec_incr) %>%
arrange(desc(days))
states_dcr_df <- state_metrics_cat %>%
filter(trend == "decreasing") %>%
pull(state) %>%
# get covid metrics
map(state_fun) %>%
# determine # days consecutive decrease
map_dfr(consec_dcr) %>%
arrange(desc(days))
# consecutive metrics + state metrics
state_metrics_cat_consec <- states_incr_df %>%
bind_rows(states_dcr_df) %>%
right_join(state_metrics_cat, by = c("state" = "state")) %>%
# add vaccine data
#left_join(v %>% ungroup() %>% select(stabbr, doses_admin_total), by = c("abbr" = "stabbr")) %>%
filter(pop_area != "NA")
state_metrics_cat_consec$cases_per_capita <- round(state_metrics_cat_consec$cases_per_capita, 0)
#-----------complete list of email bodies -----------------#
# add to load data
icu_stress <- icu %>%
group_by(collection_date) %>%
summarise(avg = mean(`Percentage of Staffed Adult ICU Beds Occupied Estimated`, na.rm = TRUE)) %>%
ungroup()
icu_phrase <- icu_stress %>%
filter(collection_date == max(collection_date)) %>%
mutate(icu_stress = case_when(
avg < 10 ~ "low",
avg >= 10 & avg < 30 ~ "moderate",
avg >= 30  & avg < 60 ~ "high",
avg >= 60 ~ "extreme"
)) %>%
select(icu_stress) %>% pull()
inpatient_stress <- inpatient %>%
group_by(collection_date) %>%
summarise(avg = mean(`Percentage of Inpatient Beds Occupied by COVID-19 Patients Estimated`, na.rm = TRUE)) %>%
ungroup()
inpatient_phrase <- inpatient_stress %>%
filter(collection_date == max(collection_date)) %>%
mutate(inpatient_covid_stress = case_when(
avg < 5 ~ "low",
avg >= 5 & avg < 10 ~ "moderate",
avg >= 10 & avg < 20 ~ "high",
avg >= 20 ~ "extreme"
)) %>%
select(inpatient_covid_stress) %>% pull()
#
# for (name in request_name){
#   rmarkdown::render('/Users/Jensen/Documents/projects/covid19_email_script/staging/r_script.Rmd',
#                     output_file =  paste("report_", name, '_', Sys.Date(), ".html", sep=''),
#                     output_dir = '/Users/Jensen/Documents/projects/covid19_email_script/staging/')
# }
#
# request_name <- unique(requests$Name)
#
# request_fun <- function(name){
#   requests %>%
#     filter(Name == {name},
#            Domestic == "Yes") %>%
#     select(Name, State)
# }
#
# # creates list of location request split by name
# request_list <- map_df(request_name, request_fun) %>%
#   split(.$Name) %>%
#   map(function(x) x$State)
#
#
#---------------- BODY of EMAIL ----------------####
# select states
ca <- state_fun("California")
ny <- state_fun("New York")
il <- state_fun("Illinois")
wa <- state_fun("Washington")
ma <- state_fun("Massachusetts")
tx <- state_fun("Texas")
nc <- state_fun("North Carolina")
mo <- state_fun("Missouri")
va <- state_fun("Virginia")
hw <- state_fun("Hawaii")
# select cities
nyc <- state_fun("New York City County, New York")
la  <- state_fun("Los Angeles County, California")
ck  <- state_fun("Cook County, Illinois")
kg  <- state_fun("King County, Washington")
sf  <- state_fun("Suffolk County, Massachusetts") %>% filter(date > "2020-09-12")
mk  <- state_fun("Mecklenburg County, North Carolina")
sb  <- state_fun("San Bernardino County, California")
hr  <- state_fun("Harris County, Texas")
sl  <- state_fun("St. Louis County, Missouri")
kc  <- state_fun("Wyandotte County, Kansas")
vb  <- state_fun("Virginia Beach city County, Virginia")
# international locations
hk <- state_fun("Hong Kong")
sg <- state_fun("Shanghai")
tc <- state_fun("Ontario")
# compose body of email for select locations
ny_body <- email_body_func(ny)
nyc_body <- email_body_func(nyc)
la_body <- email_body_func(la)
seattle_body <- email_body_func(kg)
boston_body <- email_body_func(sf)
chicago_body <- email_body_func(ck)
mecklenburg_body <- email_body_func(mk)
hk_body <- email_body_func(hk)
shanghai_body <- email_body_func(sg)
sanbernardino_body <- email_body_func(sb)
harris_body <- email_body_func(hr)
texas_body <- email_body_func(tx)
ncarolina_body <- email_body_func(nc)
missouri_body <- email_body_func(mo)
saint_louis_body <- email_body_func(sl)
illinois_body <- email_body_func(il)
kansas_body <- email_body_func(kc)
toronto_body <- email_body_func(tc)
va_body <- email_body_func(va)
vbeach_body <- email_body_func(vb)
# save output as Rdata for faster loading
save.image(file = "loaded.Rdata")
save.image(file = "C:/Users/jense/Desktop/Projects/covid_email_report_production/test_automation/master_shiny/loaded.Rdata")
setwd("C:/Users/jense/Desktop/Projects/covid_email_report_production/test_automation/master_shiny")
runApp()
state_fun("austrailia")
international %>% View()
runApp()
?labels
?scale_y_continuous()
state_fun("France") %>%
ggplot() +
geom_bar(
aes(x = date, y = cases_new),
stat = "identity",
width = 1.0,
color = "grey"
) +
geom_line(aes(x = date, y = cases_week_mavg),
color = "blue",
size = 2) +
#ggtitle("7-day Moving Average of \nNew Cases")+
xlab("Date") +
ylab("New Cases") +
scale_y_continuous(labels = comma) +
scale_x_date(date_labels = "%b-%Y", date_breaks = "1 month") +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
state_fun("France") %>%
ggplot() +
geom_bar(
aes(x = date, y = cases_new),
stat = "identity",
width = 1.0,
color = "grey"
) +
geom_line(aes(x = date, y = cases_week_mavg),
color = "blue",
size = 2) +
#ggtitle("7-day Moving Average of \nNew Cases")+
xlab("Date") +
ylab("New Cases") +
scale_y_continuous(labels = scales::number_format(accuracy = 1)) +
scale_x_date(date_labels = "%b-%Y", date_breaks = "1 month") +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
state_fun("France") %>%
ggplot() +
geom_bar(
aes(x = date, y = cases_new),
stat = "identity",
width = 1.0,
color = "grey"
) +
geom_line(aes(x = date, y = cases_week_mavg),
color = "blue",
size = 2) +
#ggtitle("7-day Moving Average of \nNew Cases")+
xlab("Date") +
ylab("New Cases") +
scale_y_continuous(labels = scales::number_format(accuracy = 1, decimal =",")) +
scale_x_date(date_labels = "%b-%Y", date_breaks = "1 month") +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
state_fun("France") %>%
ggplot() +
geom_bar(
aes(x = date, y = cases_new),
stat = "identity",
width = 1.0,
color = "grey"
) +
geom_line(aes(x = date, y = cases_week_mavg),
color = "blue",
size = 2) +
#ggtitle("7-day Moving Average of \nNew Cases")+
xlab("Date") +
ylab("New Cases") +
scale_y_continuous(labels = scales::number_format(accuracy = 1, big.mark = ",")) +
scale_x_date(date_labels = "%b-%Y", date_breaks = "1 month") +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
